import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import classes from "../styles/Home.module.scss";
import React, { useCallback, useMemo, useRef } from "react";
import { useMutation, useQuery } from "react-query";
import { TodoItem, TodoHttp, buildTodoQueryParams } from "../http/todo";
import { TodoTable } from "../Components/TodoTable";
import { useRouter } from "next/router";

type Props = {
  todoItems: TodoItem[];
  activeOnly: boolean;
};
const Home: NextPage<Props> = (props) => {
  const router = useRouter();

  const todoQuery = useQuery<TodoItem[]>(
    ["todo-list", props.activeOnly],
    () => {
      const filters = buildTodoQueryParams(props.activeOnly);
      return TodoHttp.getAll(filters);
    },
    {
      initialData: props.todoItems,
    }
  );

  const todoCreateMutation = useMutation("todo-create", TodoHttp.create, {
    onSuccess: () => refetchAndClearInput(),
  });
  const todoUpdateMutation = useMutation("todo-update", TodoHttp.update, {
    onSuccess: () => refetchAndClearInput(),
  });
  const todoDeleteMutation = useMutation("todo-delete", TodoHttp.delete);

  const itemsLeft = useMemo(() => {
    return todoQuery.data?.filter((f) => f.active).length;
  }, [todoQuery.data]);

  const inputRef = useRef<HTMLInputElement>(null);

  const refetchAndClearInput = useCallback(() => {
    todoQuery.refetch({ active: true });
    inputRef.current!.value = "";
  }, []);

  const handleInputKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && inputRef.current!.value) {
      todoCreateMutation.mutate({
        title: inputRef.current!.value,
        active: true,
      });
    }
  };

  const handleTodoUpdate = useCallback((todoItem: TodoItem) => {
    todoUpdateMutation.mutate({ ...todoItem });
  }, []);

  const handleTodoDelete = useCallback((id: number) => {
    todoDeleteMutation.mutate(id, {
      onSuccess: () => refetchAndClearInput(),
    });
  }, []);

  const handleClearCompletedClicked = async () => {
    try {
      const response = await TodoHttp.getAll();
      if (response) {
        const ids = response.filter((f) => !f.active).map((item) => item.id);

        let deleteTasks = [];
        for (const id of ids) {
          deleteTasks.push(TodoHttp.delete(id));
        }

        await Promise.all(deleteTasks);
        refetchAndClearInput();
      }
    } catch (error: any) {
      console.log(error);
    }
  };

  return (
    <div className={classes.container}>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>

      <main className={classes.main}>
        <h1>Todo</h1>
        <div className={classes.card}>
          <input
            className={classes.box}
            ref={inputRef}
            placeholder="What need to be done?"
            type="text"
            onKeyDown={handleInputKeyDown}
          />
          <TodoTable
            isLoading={
              todoQuery.isFetching ||
              todoUpdateMutation.isLoading ||
              todoCreateMutation.isLoading ||
              todoDeleteMutation.isLoading
            }
            items={todoQuery.data!}
            onTodoUpdate={handleTodoUpdate}
            onTodoDelete={handleTodoDelete}
          />
        </div>
        <div className={classes.subCard} />
        <div className={classes.filters}>
          <div>
            <span>{itemsLeft}</span> Items left
          </div>
          <div className={classes.actions}>
            <span
              className={!props.activeOnly ? classes.active : undefined}
              onClick={() => router.push("/")}
            >
              All
            </span>
            <span
              className={props.activeOnly ? classes.active : undefined}
              onClick={() => router.push("?active=true")}
            >
              Active
            </span>
          </div>
          <button type="button" onClick={handleClearCompletedClicked}>
            Clear completed
          </button>
        </div>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps<Props> = async (
  context
) => {
  const { active } = context.query;
  const activeOnly = active === "true";

  const filters = buildTodoQueryParams(activeOnly);
  const todoItems = await TodoHttp.getAll(filters);

  return {
    props: {
      todoItems,
      activeOnly,
    },
  };
};

export default Home;
